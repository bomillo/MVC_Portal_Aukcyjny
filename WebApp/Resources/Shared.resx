<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddBid" xml:space="preserve">
    <value>Place bid</value>
  </data>
  <data name="AdminPanel" xml:space="preserve">
    <value>Admin dashboard</value>
  </data>
  <data name="Analytics" xml:space="preserve">
    <value>Analytics</value>
  </data>
  <data name="Answer" xml:space="preserve">
    <value>Answer</value>
  </data>
  <data name="ApiAuthError" xml:space="preserve">
    <value>An error occured while trying to authenticate. Verify your apikey passed in request header.</value>
  </data>
  <data name="ApiKeyExist" xml:space="preserve">
    <value>Your account has assigned api key</value>
  </data>
  <data name="AuctionEnded" xml:space="preserve">
    <value>Auction is ended</value>
  </data>
  <data name="AuctionIsDraft" xml:space="preserve">
    <value>Auction is not published yet</value>
  </data>
  <data name="BidInvalidUser" xml:space="preserve">
    <value>You can't bid on your own auction</value>
  </data>
  <data name="BidInvalidValue" xml:space="preserve">
    <value>Bid value is invalid</value>
  </data>
  <data name="BidPlaced" xml:space="preserve">
    <value>Bid has been successfully added</value>
  </data>
  <data name="Bids" xml:space="preserve">
    <value>Bids</value>
  </data>
  <data name="BidToLow" xml:space="preserve">
    <value>Bid value is too low</value>
  </data>
  <data name="Business" xml:space="preserve">
    <value>Business report</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CreateBid" xml:space="preserve">
    <value>Bid</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>New auctions</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Days" xml:space="preserve">
    <value>days</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EditAuction" xml:space="preserve">
    <value>Edit auction</value>
  </data>
  <data name="Ended" xml:space="preserve">
    <value>Auctions ended</value>
  </data>
  <data name="EndIn" xml:space="preserve">
    <value>end in</value>
  </data>
  <data name="FieldRequired" xml:space="preserve">
    <value>This field is required</value>
  </data>
  <data name="FieldTooLong" xml:space="preserve">
    <value>Too long input</value>
  </data>
  <data name="FieldTooShort" xml:space="preserve">
    <value>Too short input</value>
  </data>
  <data name="GenerateApiKey" xml:space="preserve">
    <value>Create new api key</value>
  </data>
  <data name="HighContrast" xml:space="preserve">
    <value>High Contrast</value>
  </data>
  <data name="InvalidAnswer" xml:space="preserve">
    <value>Answer format is invalid</value>
  </data>
  <data name="InvalidQuestion" xml:space="preserve">
    <value>Question format is invalid</value>
  </data>
  <data name="InvalidRequestData" xml:space="preserve">
    <value>Request data was invalid</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="LoggedInAs" xml:space="preserve">
    <value>Logged in as </value>
  </data>
  <data name="MessageSent" xml:space="preserve">
    <value>Message has been sent</value>
  </data>
  <data name="MyAuctions" xml:space="preserve">
    <value>My auctions</value>
  </data>
  <data name="MyBids" xml:space="preserve">
    <value>My Bids</value>
  </data>
  <data name="MyAuctionsCsv" xml:space="preserve">
    <value>Auctions history csv</value>
  </data>
  <data name="MyAuctionsPdf" xml:space="preserve">
    <value>Auctions history pdf</value>
  </data>
  <data name="NewAnswer" xml:space="preserve">
    <value>Type your answer here...</value>
  </data>
  <data name="NewApiKey" xml:space="preserve">
    <value>Save it in safe place. Your api key is</value>
  </data>
  <data name="NewQuestion" xml:space="preserve">
    <value>Ask your question to seller here....</value>
  </data>
  <data name="NoBidValue" xml:space="preserve">
    <value>No bid value found in request body</value>
  </data>
  <data name="NoResult" xml:space="preserve">
    <value>No result</value>
  </data>
  <data name="NotLoggedIn" xml:space="preserve">
    <value>You must be logged in to do this</value>
  </data>
  <data name="NotOwner" xml:space="preserve">
    <value>You are not owner</value>
  </data>
  <data name="NowObserving" xml:space="preserve">
    <value>You now observe auction: </value>
  </data>
  <data name="Observed" xml:space="preserve">
    <value>Observed</value>
  </data>
  <data name="Popularity" xml:space="preserve">
    <value>Categories popularity</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceFrom" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="PriceTo" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="Questions" xml:space="preserve">
    <value>Questions</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="ShowActive" xml:space="preserve">
    <value>Show Active</value>
  </data>
  <data name="ShowAll" xml:space="preserve">
    <value>Show All</value>
  </data>
  <data name="ShowDraft" xml:space="preserve">
    <value>Show Draft</value>
  </data>
  <data name="ShowEnded" xml:space="preserve">
    <value>Show Ended</value>
  </data>
  <data name="SomethingWentWrong" xml:space="preserve">
    <value>Something went wrong</value>
  </data>
  <data name="Subscribe" xml:space="preserve">
    <value>Subscribe</value>
  </data>
  <data name="Unsubscribe" xml:space="preserve">
    <value>Unsubscribe</value>
  </data>
  <data name="TimeSpan" xml:space="preserve">
    <value>Report time span (days)</value>
  </data>
  <data name="Publish" xml:space="preserve">
    <value>Publish</value>
  </data>
  <data name="NewBidMailSubject" xml:space="preserve">
    <value>New bid has been placed</value>
  </data>
  <data name="NewBidMailBody" xml:space="preserve">
    <value>New bid has been placed on auction {0}. Current highest bid is for {1}.</value>
  </data>
  <data name="EndOfAuctionMailSubject" xml:space="preserve">
    <value>Auction has ended</value>
  </data>
  <data name="EndOfAuctionMailBody" xml:space="preserve">
    <value>Auction {0} has ended!</value>
  </data>
</root>